(load "mal/util.mal")
(load "mal/random.mal")

(define befunge::< (car (to-list "<")))
(define befunge::> (car (to-list ">")))
(define befunge::^ (car (to-list "^")))
(define befunge::v (car (to-list "v")))
(define befunge::_ (car (to-list "_")))
(define befunge::| (car (to-list "|")))
(define befunge::? (car (to-list "?")))
(define befunge::space (car (to-list " ")))
(define befunge::# (car (to-list "#")))
(define befunge::atmark (car (to-list "@")))
(define befunge::0 (car (to-list "0")))
(define befunge::1 (car (to-list "1")))
(define befunge::2 (car (to-list "2")))
(define befunge::3 (car (to-list "3")))
(define befunge::4 (car (to-list "4")))
(define befunge::5 (car (to-list "5")))
(define befunge::6 (car (to-list "6")))
(define befunge::7 (car (to-list "7")))
(define befunge::8 (car (to-list "8")))
(define befunge::9 (car (to-list "9")))
(define befunge::dquote (car (to-list "\"")))
(define befunge::& (car (to-list "&")))
(define befunge::~ (car (to-list "~")))
(define befunge::. (car (to-list ".")))
(define befunge::comma (car (to-list ",")))
(define befunge::+ (car (to-list "+")))
(define befunge::- (car (to-list "-")))
(define befunge::* (car (to-list "*")))
(define befunge::/ (car (to-list "/")))
(define befunge::% (car (to-list "%")))
(define befunge::bquote (car (to-list "`")))
(define befunge::! (car (to-list "!")))
(define befunge::: (car (to-list ":")))
(define befunge::\ (car (to-list "\\")))
(define befunge::$ (car (to-list "$")))
(define befunge::g (car (to-list "g")))
(define befunge::p (car (to-list "p")))

(define befunge::mov
  (lambda (code stack cx cy dcons mode)
	(! let ((lx (length (car code)))
			(ly (length code)))
	   (list code
		  stack
		  (% (+ cx (car dcons) lx) lx)
		  (% (+ cy (cdr dcons) ly) ly)
		  dcons
		  mode))))

(define befunge::act-normal
  (lambda (code stack cx cy dcons c)
	(! case c
	   (befunge::< (befunge::mov code stack cx cy (cons -1 0) 'normal)
	   befunge::> (befunge::mov code stack cx cy (cons 1 0) 'normal)
	   befunge::^ (befunge::mov code stack cx cy (cons 0 -1) 'normal)
	   befunge::v (befunge::mov code stack cx cy (cons 0 1) 'normal)
	   befunge::_ (if (equal (! pop stack) 0)
					(befunge::mov code stack cx cy (cons 1 0) 'normal)
					(befunge::mov code stack cx cy (cons -1 0) 'normal))
	   befunge::| (if (equal (! pop stack) 0)
					(befunge::mov code stack cx cy (cons 0 1) 'normal)
					(befunge::mov code stack cx cy (cons 0 -1) 'normal))
	   befunge::? (! case (random::randint 0 4)
					 (0 (befunge::mov code stack cx cy (cons -1 0) 'normal))
					 (1 (befunge::mov code stack cx cy (cons 0 -1) 'normal))
					 (2 (befunge::mov code stack cx cy (cons 1 0) 'normal))
					 (3 (befunge::mov code stack cx cy (cons 0 1) 'normal)))
	   befunge::space (befunge::mov code stack cx cy dcons 'normal)
	   befunge::# (apply befunge::mov (befunge::mov code stack cx cy dcons 'normal))
	   befunge::atmark (befunge::mov code stack cx cy (cons 0 0) 'halt)
	   befunge::0 (befunge::mov code (cons 0 stack) cx cy dcons 'normal)
	   befunge::1 (befunge::mov code (cons 1 stack) cx cy dcons 'normal)
	   befunge::2 (befunge::mov code (cons 2 stack) cx cy dcons 'normal)
	   befunge::3 (befunge::mov code (cons 3 stack) cx cy dcons 'normal)
	   befunge::4 (befunge::mov code (cons 4 stack) cx cy dcons 'normal)
	   befunge::5 (befunge::mov code (cons 5 stack) cx cy dcons 'normal)
	   befunge::6 (befunge::mov code (cons 6 stack) cx cy dcons 'normal)
	   befunge::7 (befunge::mov code (cons 7 stack) cx cy dcons 'normal)
	   befunge::8 (befunge::mov code (cons 8 stack) cx cy dcons 'normal)
	   befunge::9 (befunge::mov code (cons 9 stack) cx cy dcons 'normal)
	   befunge::dquote (befunge::mov code stack cx cy dcons 'str)
	   befunge::& (befunge::mov code (cons (stoi (getline)) stack) cx cy dcons 'normal)
	   befunge::~ (befunge::mov code (cons (getc) stack) cx cy dcons 'normal)
	   befunge::. (do (prin (sprint (! pop stack) " "))
					(befunge::mov code stack cx cy dcons 'normal))
	   befunge::comma (do (prin (string (list (! pop stack))))
					(befunge::mov code stack cx cy dcons 'normal))
	   befunge::+ (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (+ x y)) cx cy dcons 'normal))
	   befunge::- (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (- x y)) cx cy dcons 'normal))
	   befunge::* (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (* x y)) cx cy dcons 'normal))
	   befunge::/ (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (/ x y)) cx cy dcons 'normal))
	   befunge::% (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (% x y)) cx cy dcons 'normal))
	   befunge::bquote (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (if (> x y) 1 0)) cx cy dcons 'normal))
	   befunge::! (! let ((x (! pop stack)))
					 (befunge::mov code (! push stack (if (= x 0) 1 0)) cx cy dcons 'normal))
	   befunge::: (! let ((x (! pop stack)))
					 (do (! push stack x)
					   (! push stack x)
					   (befunge::mov code stack cx cy dcons 'normal)))
	   befunge::\ (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (do (! push stack y)
					   (! push stack x)
					   (befunge::mov code stack cx cy dcons 'normal)))
	   befunge::$ (do (! pop stack)
					  (befunge::mov code stack cx cy dcons 'normal))
	   befunge::g (! let ((y (! pop stack))
						  (x (! pop stack)))
					 (befunge::mov code (! push stack (nth (nth code y) x)) cx cy dcons 'normal))
	   befunge::p (! let ((y (! pop stack))
						  (x (! pop stack))
						  (v (! pop stack)))
					 (befunge::mov (updatenth-in code (list y x) v) stack cx cy dcons 'normal))
	   t (befunge::mov code stack cx cy dcons 'normal)))))

(define befunge::act
  (lambda ((code stack cx cy dcons mode))
	(! let* ((c (nth (nth code cy) cx)))
	   (! case mode
		  ('normal (befunge::act-normal code stack cx cy dcons c)
		   'str (if (= befunge::dquote c)
				  (befunge::mov code stack cx cy dcons 'normal)
				  (befunge::mov code (cons c stack) cx cy dcons 'str))
		   'halt (list code stack cx cy dcons 'halt))))))

(define befunge::read
  (lambda (str)
	(! let* ((rows (map to-list (split str "\n")))
			 (ncol (max-in (map length rows))))
	   (map (lambda (row)
			  (append row (make-list (- ncol (length row)) befunge::space)))
			rows))))

(define befunge::eval
  (lambda (code)
	(! letrec ((eval-rec
				 (lambda (rec)
				   (if (eq (nth rec 5) 'halt)
					 rec
					 (eval-rec (befunge::act rec))))))
	   (eval-rec (list code '() 0 0 (cons 1 0) 'normal)))))

(define befunge::print
  (! let ((print-code
			(lambda (code)
			  (join (map string code) "\n"))))
	 (lambda ((code stack cx cy dcons))
	   (sprint "pos: " (cons cx cy) " dir: " dcons "\n"
			   "stk: " stack "\n"
			   (print-code code)))))

