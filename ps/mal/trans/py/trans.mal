(load "mal/interpreter.mal")

(define trans::py::indent
  (lambda (line)
	(sprint "\t" line)))

(! let ((counter -1))
   (define trans::py::gen-lambda-name
	 (lambda () (do (setq counter (+ counter 1))
				  	(sprint "_sys_lambda_" counter)))))

(! let ((counter -1))
   (define trans::py::gen-do-name
	 (lambda () (do (setq counter (+ counter 1))
				  	(sprint "_sys_do_" counter)))))

(define trans::py::sys-var "_sys_var")

(define trans::py::env ())

(define trans::py::regist
  (lambda (sym body) `(! push trans::py::env (cons ',sym (lambda (args) ,body)))))

; TODO 末尾呼出最適化
(! trans::py::regist if (! let ((pred (trans::py::encode (car args)))
								(then (trans::py::encode (nth args 1)))
								(else (trans::py::encode (nth args 2))))
						   (append (tail-drop pred 1)
								   (tail-drop then 1)
								   (tail-drop else 1)
								   (list (sprint "(" (back then) " if " (back pred)
												 " else " (back else) ")")))))

(! trans::py::regist lambda (! let ((lambda-name (trans::py::gen-lambda-name))
									(lambda-body (trans::py::encode (nth args 1))))
				   (append (list (sprint "def " lambda-name " ("
										 (join (car args) ", ") "):"))
						   (map trans::py::indent (tail-drop lambda-body 1))
						   (list (trans::py::indent
								   (sprint "return " (back lambda-body)))
								 lambda-name))))

(! trans::py::regist define (! let ((sym (car args))
									(val (trans::py::encode (nth args 1))))
							   (append (tail-drop val 1)
									   (list (sprint "global " sym)
											 (sprint sym " = " (back val))
											 (string sym))))) ; TODO 値でなく、クォートしたシンボルを返すようにする
(! trans::py::regist setq (! let ((sym (car args))
								  (val (trans::py::encode (nth args 1))))
							 (append (tail-drop val 1)
									 (list (sprint sym " = " (back val))
										   (string sym)))))
(! trans::py::regist quote ()) ; TODO
(! trans::py::regist do (! let ((do-name (trans::py::gen-do-name))
								(do-body (apply append (map trans::py::encode args))))
						   (append (list (sprint "def " do-name " ():"))
								   (map trans::py::indent (tail-drop do-body 1))
								   (list (trans::py::indent
										   (sprint "return " (back do-body)))
										 (sprint do-name "()")))))
(! trans::py::regist and (! let ((vals (map trans::py::encode args)))
							(append (apply append (map (! fn (tail-drop $0 1)) vals))
									(list (sprint "(" (join (map back vals) " and ")
												  ")")))))
(! trans::py::regist or (! let ((vals (map trans::py::encode args)))
							(append (apply append (map (! fn (tail-drop $0 1)) vals))
									(list (sprint "(" (join (map back vals) " or ")
												  ")")))))
(! trans::py::regist quasiquote (trans::py::encode
								  (mal::expand-quasiquote-proc (car args)
															   (environment))))
(! trans::py::regist environment ()) ; TODO
(! trans::py::regist ! (trans::py::encode
						 (mal::expand-syntax-proc
						   (car args) (cdr args) (environment))))
(! trans::py::regist catch (! let ((ebody (trans::py::encode (car args))))
							  (append (list "try:")
									  (map trans::py::indent
										   (trans::py::encode (nth args 1)))
									  (list "except Erro as _sys_erro:")
									  (map trans::py::indent
										   (append (tail-drop ebody 1)
												   (list (sprint (back ebody)
																 "(_sys_erro.id, _sys_erro.message)"))))
									  (list "except Exception as _sys_erro:")
									  (map trans::py::indent
										   (append (tail-drop ebody 1)
												   (list (sprint (back ebody)
																 "(-1, _sys_erro.__str__())")))))))

(define trans::py::replace-define
  (! letrec ((pick-define
			   (lambda (rexpr)
				 (if (atom rexpr)
				   nil
				   (if (eq 'define (car rexpr))
					 (list rexpr)
					 (apply append (map pick-define rexpr)))))))
	 (lambda (expr)
	   (append '(do)
			   (map (! fn `(setq ,(nth $0 1) nil)) (pick-define expr))
			   (list expr)))))

(define trans::py::encode
  (! let ((var-counter 0))
	 (lambda (expr)
	   (! case (type expr)
		  ('<nil> (list "None")
		   '<inum> (list (sprint expr))
		   '<fnum> (list (sprint expr))
		   '<strn> (list (sprint "\"" expr "\""))
		   '<symb> (list (sprint expr))
		   '<cons> (! aif (assocdr trans::py::env (car expr))
					  (it (cdr expr))
					  ; TODO 末尾呼出最適化
					  (! let ((proc (trans::py::encode (car expr)))
							  (args (map trans::py::encode (cdr expr))))
						 (append (tail-drop proc 1)
								 (apply append (map (! fn (tail-drop $0 1)) args))
								 (list (sprint (back proc) "("
											   (join (map back args) ", ") ")"))))))))))

