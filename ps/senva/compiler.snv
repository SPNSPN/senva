(load "senva/interpreter.snv")
(load "senva/derxi.snv")

(define derxi::+subroutines+ nil)

(define derxi::defsubroutine
  (lambda  (sym body)
	`(! push derxi::+subroutines+ (cons ,sym (lambda (args env) ,body)))))

(! derxi::defsubroutine eq
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::eq)))

(! derxi::defsubroutine cons
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::cons)))

(! derxi::defsubroutine car
   (append (derxi::compile (car args) env)
		   (list derxi::car)))

(! derxi::defsubroutine cdr
   (append (derxi::compile (car args) env)
		   (list derxi::cdr)))

(! derxi::defsubroutine atom
   (append (derxi::compile (car args) env)
		   (list derxi::atom)))

(! derxi::defsubroutine equal
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::equal)))

(! derxi::defsubroutine rplaca
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::rpla)))

(! derxi::defsubroutine rplacd
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::rpld)))

(! derxi::defsubroutine nconc
   (! let ((pcode (derxi::compile (car args) env)))
	  (append (list derxi::func (+ (length pcode) 4)
					derxi::push00)
			  pcode
			  (list derxi::list 1
					derxi::rcur

					derxi::func 13
					derxi::push00
					derxi::atom
					derxi::cond 7

					derxi::push01
					derxi::push00
					derxi::cdr
					derxi::push00
					derxi::list 2
					derxi::rcur

					derxi::push10
					derxi::retn

					derxi::list 1
					derxi::aply)
			  (derxi::compile (nth args 1) env)
			  (list derxi::rpld))))

(! derxi::defsubroutine +
   (! let ((n (length args)))
	  (! cond
		 ((= n 0) (list derxi::cnst 0)
		  (= n 1) (derxi::compile (car args) env)
		  t (append (derxi::compile (car args) env)
					(derxi::compile (cons '+ (cdr args)) env)
					(list derxi::add))))))

(! derxi::defsubroutine -
   (! let ((n (length args)))
	  (! cond
		 ((= n 0) (list derxi::cnst 0)
		  (= n 1) (derxi::compile (car args) env)
		  t (append (derxi::compile (car args) env)
					(derxi::compile (cons '+ (cdr args)) env)
					(list derxi::sub))))))

(! derxi::defsubroutine *
   (! let ((n (length args)))
	  (! cond
		 ((= n 0) (list derxi::cnst 1)
		  (= n 1) (derxi::compile (car args) env)
		  t (append (derxi::compile (car args) env)
					(derxi::compile (cons '* (cdr args)) env)
					(list derxi::mul))))))

(! derxi::defsubroutine /
   (! let ((n (length args)))
	  (! cond
		 ((= n 0) (list derxi::cnst 1)
		  (= n 1) (derxi::compile (car args) env)
		  t (append (derxi::compile (car args) env)
					(derxi::compile (cons '* (cdr args)) env)
					(list derxi::div))))))

(! derxi::defsubroutine %
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::mod)))

(! derxi::defsubroutine >
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::gt)))

(! derxi::defsubroutine <
   (append (derxi::compile (car args) env)
		   (derxi::compile (nth args 1) env)
		   (list derxi::lt)))

(! derxi::defsubroutine list
   (if args
	 (append (mapcat (lambda (a) (derxi::compile a env)) args)
			 (list derxi::list (length args)))
	 (list derxi::nil)))

; TODO
(! derxi::defsubroutine print
   ())

; TODO
(! derxi::defsubroutine prin
   ())

; TODO
(! derxi::defsubroutine sprint
   ())

; TODO
(! derxi::defsubroutine tolist
   ())


(define derxi::compile
  (lambda (expr env)
	(! let ((typ (type expr)))
	   (! cond
		  ((eq '<cons> typ)
		   (! let ((proc (car expr))
				   (args (cdr expr)))
			  (! cond
				 ; spfm
				 ((eq 'if proc)
				  (! let ((then (derxi::compile (nth args 1) env)))
					 (append (derxi::compile (car args) env)
							 (list derxi::cond (length then))
							 then
							 (derxi::compile (nth args 2) env)))
				  (eq 'quote proc) (derxi::compile::push (car args))
				  (eq 'lambda proc)
				  (! let ((body (derxi::compile (nth args 1) (cons (car args) env))))
					 (append (list derxi::func (length body)) body))
				  (eq 'syntax proc) (derxi::compile (senva::expand-syntax expr) env)
				  (eq 'define proc) (append (derxi::compile::push (car args))
											(derxi::compile (nth args 1) env)
											(list derxi::def))
				  (eq 'setq proc) (append (derxi::compile (car args) env)
										  (derxi::compile (nth args 1) env)
										  (list derxi::setq))
				  (eq 'do proc) (if args
								  (append (derxi::compile (car args) env)
										  (derxi::compile (cons 'do (cdr args)) env)))
				  (eq 'quasiquote proc) (expand-quasiquote args)
				  (eq 'syntax proc) (expand-syntax args)
				  (eq 'catch proc) () ; TODO
				  (eq 'environment proc) (derxi::compile::push env)
				  ; func
				  t (append (derxi::compile::push args)
							(derxi::compile proc env)
							(list derxi::aply)))))
		   (eq '<symb> typ) (derxi::compile::locate expr env)
		   (eq '<inum> typ) (list derxi::cnst expr)
		   (eq '<nil> typ) (list derxi::nil)
		   t (throw 1 (sprint expr " is not compilable.")))))))

(define derxi::compile::push
  (lambda (expr)
	(! let ((typ (type expr)))
	   (! cond
		  ((eq '<cons> typ) (if (purelistp expr)
							  (append (mapcat (lambda (e) (derxi::compile::push e))
											  expr)
									  (list derxi::list (length expr)))
							  (append (derxi::compile::push (car expr))
									  (derxi::compile::push (cdr expr))
									  (list derxi::cons)))
		   (eq '<symb> typ) (append (mapcat (lambda (e) (derxi::compile::push e))
											  (to-list expr))
									(list derxi::vect (length expr) derxi::symb))
		   (eq '<inum> typ) (list derxi::cnst expr)
		   (eq '<nil> typ) (list derxi::nil)
		   t (throw 1 (sprint  expr " is not compilable.")))))))

; TODO
(define derxi::compile::locate
  (! letrec ((locate-rec
			   (lambda (sym rest y)
				 (if rest
				   (! aif (find-if-idx (lambda (s) (eq s sym)) (car rest))
					  (! cond ((equal (list it y) '(0 0)) (list derxi::push00)
							   (equal (list it y) '(1 0)) (list derxi::push10)
							   (equal (list it y) '(2 0)) (list derxi::push20)
							   (equal (list it y) '(0 1)) (list derxi::push01)
							   (equal (list it y) '(1 1)) (list derxi::push11)
							   (equal (list it y) '(2 1)) (list derxi::push21)
							   t (list it y derxi::push)))
					  (locate-rec sym (cdr rest) (+ y 1)))))))
	 (lambda (sym env)
	   (! aif (locate-rec sym env 0)
		  (! aif (assoc sym (last env))
			 (cdr it)
			 (throw 1 (sprint sym " is not defined.")))))))

