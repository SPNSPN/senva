(load "senva/util.snv")

(! letrec ((rec
				  (lambda (n st iseven)
					(if (equal 0 n)
					  iseven
					  (rec (+ n st) st (not iseven))))))
		(do (define math::oddp
			  (lambda (n)
				(rec n (if (< n 0) 1 -1) nil)))
		  (define math::evenp
			(lambda (n)
			  (rec n (if (< n 0) 1 -1) t)))))

(define math::pow
  (! letrec
		 ((pow-rec
			(lambda (b e acc)
			  (if (< e 1)
				acc
				(pow-rec  b (- e 1) (* b acc))))))
		 (lambda (b e) (pow-rec b e 1))))

(define math::combination
  (lambda (coll n)
	(if (and  coll (< 0 n))
		(if (equal n (length coll))
		  (list coll)
		  (append
			(map (lambda (d)
				   (cons (car coll) d))
				 (math::combination (cdr coll) (- n 1)))
			(math::combination (cdr coll) n)))
	  (list nil))))

(define math::permutation
  (! letrec
	 ((permu
		(lambda (coll)
		  (if coll
			(mapcat (lambda (idx)
					  (map (lambda (dcoll)
							 (cons (nth coll idx)
								   dcoll))
						   (permu (skip coll idx))))
					(range 0 (length coll)))
			(list nil)))))
	 (lambda (coll n)
	   (mapcat permu (math::combination coll n)))))

(define math::floor
  (lambda (n)
	(! let ((fn (float (int n))))
	   (if (< n 0)
		 (if (equal fn (float n)) fn (- fn 1.0))
		 fn))))

(define math::ceil
  (lambda (n)
	(! let ((fn (math::floor n)))
	   (if (equal fn (float n))
		 fn
		 (+ 1.0 fn)))))

(define math::round (lambda (n) (math::floor (+ 0.5 n))))

