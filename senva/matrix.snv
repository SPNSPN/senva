(load "senva/util.snv")
(load "senva/math.snv")

(define matrix::eye
  (lambda (n)
	(! let ((row (lambda (i)
						(append (times i 0)
								(list 1)
								(times (- n i 1) 0)))))
			(map row (range 0 n)))))

(define matrix::transverse
  (! letrec ((transverse-rec
					(lambda (coll tcoll)
					  (if (some not coll)
						(reverse tcoll)
						(transverse-rec
						  (map cdr coll)
						  (cons (map car coll) tcoll))))))
		  (lambda (coll) (transverse-rec coll nil))))

(define matrix::sgn
  (! letrec
		  ((sgn-rec
			 (lambda (colla collb odd ofst)
			   (if colla
				 (if (equal (car colla) (car collb))
				   (sgn-rec (cdr colla) (cdr collb)
							odd
							(+ 1 ofst))
				   (! let
						   ((at (- (car colla) ofst)))
						   (sgn-rec (cons
									  (nth colla at)
									  (append (take (cdr colla) (- at 1))
											  (cons (car colla)
													(drop colla (+ 1 at)))))
									collb
									(not odd)
									ofst)))
				 (if odd -1 1)))))
		  (lambda (colla collb)
			(sgn-rec colla collb nil 0))))

(define matrix::determinant
  (lambda (mat)
	(! let* ((n (length mat))
			 (idxs (range 0 n)))
			(! letrec
			  ((mul-sig (lambda (mat sig acc)
						  (if sig
							(mul-sig
							  (cdr mat)
							  (cdr sig)
							  (* acc
								 (nth (car mat)
									  (car sig))))
							acc))))
			  (reduce (lambda (acc sig)
						(+ acc
						   (* (matrix::sgn sig idxs)
							  (mul-sig mat sig 1))))
					  (math::permutation idxs n) 0)))))

(define matrix::inverse
  (lambda (mat)
	(! let* ((n (length mat))
				  (idxs (range 0 n))
				  (det (matrix::determinant mat)))
			(if (equal 0 det)
			  nil
			  (map (lambda (j)
					 (map (lambda (i)
							(/ (* (if (math::evenp
										(+ i j))
									1 -1)
								  (matrix::determinant
									(map (lambda (row)
										   (skip row i))
										 (skip mat j))))
							   det))
						  idxs))
				   idxs)))))

