(load "senva/interpreter.snv")
(load "senva/file.snv")

(define trans::py::translated-self '())

(define trans::py::indent
  (lambda (line)
	(sprint "\t" line)))

(define trans::py::sys-var "_sys_var")

(! let ((counter -1))
   (define trans::py::gen-lambda-name
	 (lambda () (do (setq counter (+ counter 1))
				  	(sprint "_sys_lambda_" counter)))))

(! let ((counter -1))
   (define trans::py::gen-do-name
	 (lambda () (do (setq counter (+ counter 1))
				  	(sprint "_sys_do_" counter)))))

(define trans::py::env nil)

(define trans::py::regist
  (lambda (sym body) `(! push trans::py::env (cons ',sym (lambda (args env) ,body)))))

(define trans::py::regist-mid
  (lambda (sym op zeros)
	`(! push  trans::py::env
		(cons ',sym
			  (lambda (args env)
				(! let ((vals (map trans::py::encode
								   (! cond 
									  ((= 0 (length args)) (list ,zeros)
									   (= 1 (length args)) (cons ,zeros args)
									   t args)))))
				   (append (apply append (map (! fn (tail-drop $0 1)) vals))
						   (list (sprint "(" (join (map back vals) ,op)
										 ")")))))))))

; TODO 末尾呼出最適化
(! trans::py::regist if (! let ((pred (trans::py::encode (car args)))
								(then (trans::py::encode (nth args 1)))
								(else (trans::py::encode (nth args 2))))
						   (append (tail-drop pred 1)
								   (tail-drop then 1)
								   (tail-drop else 1)
								   (list (sprint "(" (back else)
												 " if isnil(" (back pred)
												 ") else " (back then) ")")))))

(define trans::py::expand-lambda-args
  (! letrec ((expand-rec (lambda (rest syms binds)
						   (! cond
							  ((not rest) (list (reverse syms) binds)
							   (atom rest) (list (reverse (cons (sprint "*" rest)
																syms)) binds)
							   (atom (car rest)) (expand-rec (cdr rest)
															 (cons (sprint (car rest))
																   syms)
															 binds)
							   t (! let ((lamarg (sprint "_sys_lamarg_" (length binds))))
								  (expand-rec (cdr rest)
											  (cons lamarg syms)
											  (cons (list lamarg (car rest)) binds)))))))
			 (bind-rec (lambda (sym tree acs)
						 (! cond
							((not tree) nil
							 (atom tree) (list 
										   (sprint tree " = " (join acs "(") "(" sym
												   (str-times (length acs) ")")))
							 t (append (bind-rec sym (car tree) (cons "car" acs))
									   (bind-rec sym (cdr tree) (cons "cdr" acs))))))))
	 (lambda (form)
	   (! let (((syms binds) (expand-rec form)))
		  (list (join syms ", ")
				(apply append (cons (if (and (back syms)
											 (= "*" (getat (back syms) 0)))
									  (! let ((bsym (back syms)))
										 (list (sprint (substr bsym 1 (length bsym))
													   " = l(" bsym ")"))))
									(map (! fn (bind-rec (car $0) (cadr $0))) binds))))))))

(! trans::py::regist lambda (! let ((lambda-name (trans::py::gen-lambda-name))
									(lambda-body (trans::py::encode (nth args 1)))
									(lambda-args (trans::py::expand-lambda-args
												   (car args))))
							   (append (list (sprint "def " lambda-name " ("
													 (car lambda-args) "):"))
									   (map trans::py::indent (cadr lambda-args))
									   (map trans::py::indent (tail-drop lambda-body 1))
									   (list (trans::py::indent
											   (sprint "return " (back lambda-body)))
											 lambda-name))))

(! trans::py::regist define (! let ((sym (trans::py::rename-symb (car args)))
									(val (trans::py::encode (nth args 1))))
							   (append (tail-drop val 1)
									   (list (sprint "global " sym)
											 (sprint sym " = " (back val))
											 (sprint "Symb(\"" sym "\")")))))
(! trans::py::regist setq (! let ((sym (car args))
								  (val (trans::py::encode (nth args 1))))
							 (append (tail-drop val 1)
									 (list (sprint sym " = " (back val))
										   (string sym)))))
;(! trans::py::regist quote (list (sprint "car(lread(\"" (car args) "\"))")))
(define trans::py::encode-quote
  (! letrec ((encode-quote-rec
			   (lambda (expr-rec)
				 (! case (type expr-rec)
					('<cons> (! let ((codes (map encode-quote-rec expr-rec)))
								(append
								  (apply append (map (! fn (tail-drop $1 1)) codes))
								  (list
									(sprint "l(" (join (map back codes) ", ") ")"))))
					 '<symb> (list (sprint "Symb(\"" expr-rec "\")"))
					 t (list (sprint expr-rec)))))))
	 (lambda (expr) (encode-quote-rec expr))))
(! trans::py::regist quote (trans::py::encode-quote (car args)))
(! trans::py::regist do (! let ((do-name (trans::py::gen-do-name))
								(do-body (apply append (map trans::py::encode args))))
						   (append (list (sprint "def " do-name " ():"))
								   (map trans::py::indent (tail-drop do-body 1))
								   (list (trans::py::indent
										   (sprint "return "
												   (back (if do-body do-body
													 (trans::py::encode nil)))))
										 (sprint do-name "()")))))
(! trans::py::regist-mid and " and " t)
(! trans::py::regist-mid or " or " nil)
(define trans::py::encode-quasiquote
  (! letrec ((has-splicing
			   (lambda (expr) (find-if (! fn (and (eq '<cons> (type $0))
												  (eq 'splicing (car $0)))) expr)))
			 (encode-quasiquote-rec
			   (lambda (expr-rec)
				 (! case (type expr-rec)
					('<cons>
					 (! cond
						((has-splicing expr-rec)
						 	(! let ((codes
									  (map (! fn
											  (if (and (eq '<cons> (type $0))
													   (eq 'splicing (car $0)))
												(trans::py::encode (cadr $0))
												(! let ((code
														  (encode-quasiquote-rec $0)))
												   (append (tail-drop code 1)
														   (list (sprint "l("
																		 (back code)
																		 ")"))))))
										   expr-rec)))
							   (append
								 (apply append (map (! fn (tail-drop $0 1)) codes))
								 (list (reduce (lambda (acc e)
												 (sprint "append(" acc ", " e ")"))
											   (map back codes) nil))))
						 (eq 'unquote (car expr-rec))
						 	(trans::py::encode (cadr expr-rec))
						 t (! let ((codes (map encode-quasiquote-rec expr-rec)))
							  (append
								(apply append (map (! fn (tail-drop $0 1)) codes))
								(list
								  (sprint "l(" (join (map back codes) ", ") ")"))))))
					 '<symb> (list (sprint "Symb(\"" expr-rec "\")"))
					 t (list (sprint expr-rec)))))))
	 (lambda (expr) (encode-quasiquote-rec expr))))
(! trans::py::regist quasiquote (trans::py::encode-quasiquote (car args)))
(! trans::py::regist environment (list "genv"))
(! trans::py::regist ! (trans::py::encode
						 (senva::expand-syntax-proc (car args) (cdr args) env)))
(! trans::py::regist catch (! let ((ebody (trans::py::encode (car args))))
							  (append (list "try:")
									  (map trans::py::indent
										   (trans::py::encode (nth args 1)))
									  (list "except Erro as _sys_erro:")
									  (map trans::py::indent
										   (append (tail-drop ebody 1)
												   (list (sprint (back ebody)
																 "(_sys_erro.id, _sys_erro.estr)"))))
									  (list "except Exception as _sys_erro:")
									  (map trans::py::indent
										   (append (tail-drop ebody 1)
												   (list (sprint (back ebody)
																 "(-1, _sys_erro.__str__())")))))))

(! trans::py::regist trans::py::block
   (apply append (map trans::py::encode args)))

(! trans::py::regist list
   (trans::py::encode-funcall '("l") (map trans::py::encode args)))

(! trans::py::regist-mid + " + " 0)
(! trans::py::regist-mid - " - " 0)
(! trans::py::regist-mid * " * " 1)
(! trans::py::regist /
   (trans::py::encode-funcall '("div") (map trans::py::encode args)))
(! trans::py::regist %
   (trans::py::encode-funcall '("mod") (map trans::py::encode args)))
(! trans::py::regist >
   (trans::py::encode-funcall '("gt") (map trans::py::encode args)))
(! trans::py::regist >=
   (trans::py::encode-funcall '("ge") (map trans::py::encode args)))
(! trans::py::regist <
   (trans::py::encode-funcall '("lt") (map trans::py::encode args)))
(! trans::py::regist <=
   (trans::py::encode-funcall '("le") (map trans::py::encode args)))
(! trans::py::regist int
   (trans::py::encode-funcall '("lint") (map trans::py::encode args)))
(! trans::py::regist float
   (trans::py::encode-funcall '("lfloat") (map trans::py::encode args)))
(! trans::py::regist load ; TODO loadするファイルの内容もencodeするように変更
   (! let ((path (trans::py::encode (car args))))
	  (append (list (sprint "if not '" (trans::py::rename-symb 'trans::py::encodetop)
							"' in globals():"))
			  (map trans::py::indent trans::py::translated-self)
			  (tail-drop path 1)
			  (list (sprint trans::py::sys-var " = [" (back path) "]")
					(sprint trans::py::sys-var ".append(open("
							trans::py::sys-var "[0].py, mode = 'w'))")
					(sprint trans::py::sys-var "[1].write("
							(trans::py::rename-symb 'trans::py::encodetop)
							"(" trans::py::sys-var "[0].py))")
					(sprint trans::py::sys-var "[1].close()")
					(sprint "for k, v in importlib.import_module("
							trans::py::sys-var "[0].py):")
					(trans::py::indent "globals()[k] = v")
					"nil"))))
(! trans::py::regist pushqueu
   (! let ((q (trans::py::encode (car args)))
		   (val (trans::py::encode (cadr args))))
	  (append (tail-drop q 1)
			  (tail-drop val 1)
			  (list (sprint (back q) ".push(" (back val) ")")))))
(! trans::py::regist popqueu
   (! let ((q (trans::py::encode (car args))))
	  (append (tail-drop q 1)
			  (list (sprint (back q) ".pop()")))))
(! trans::py::regist concqueu
   (! let ((qa (trans::py::encode (car args)))
		   (qb (trans::py::encode (cadr args))))
	  (append (tail-drop qa 1)
			  (tail-drop qb 1)
			  (list (sprint (back qa) ".concat(" (back qb) ")")))))
(! trans::py::regist to-list
   (trans::py::encode-funcall '("to_list") (map trans::py::encode args)))
(! trans::py::regist to-vect
   (trans::py::encode-funcall '("to_vect") (map trans::py::encode args)))
(! trans::py::regist to-queu
   (trans::py::encode-funcall '("to_queu") (map trans::py::encode args)))
(! trans::py::regist apply
   (trans::py::encode-funcall '("lapply") (map trans::py::encode args)))
(! trans::py::regist throw
   (trans::py::encode-funcall '("lthrow") (map trans::py::encode args)))
(! trans::py::regist empty
   (trans::py::encode-funcall '("lempty") (map trans::py::encode args)))
(! trans::py::regist print
   (trans::py::encode-funcall '("llprint") (map trans::py::encode args)))
(! trans::py::regist prin
   (trans::py::encode-funcall '("llprin") (map trans::py::encode args)))
(! trans::py::regist getc
   (trans::py::encode-funcall '("lgetc") (map trans::py::encode args)))
(! trans::py::regist type
   (trans::py::encode-funcall '("ltype") (map trans::py::encode args)))
(! trans::py::regist getat
   (trans::py::encode-funcall '("lgetat") (map trans::py::encode args)))
(! trans::py::regist setat
   (trans::py::encode-funcall '("lsetat") (map trans::py::encode args)))
(! trans::py::regist py (list (sprint (car args))))
(! trans::py::regist import (list (sprint "import " (car args))))
(! trans::py::regist -> (list (join (map sprint args) ".")))



(define trans::py::replace-define
  (! letrec ((pick-define
			   (lambda (rexpr)
				 (if (atom rexpr)
				   nil
				   (if (eq 'define (car rexpr))
					 (list rexpr)
					 (apply append (map pick-define rexpr)))))))
	 (lambda (expr)
	   (append '(trans::py::block)
			   (map (! fn `(setq ,(nth $0 1) nil)) (pick-define expr))
			   (list expr)))))

(define trans::py::rename-symb
  (! let ((hyphen (car (to-list "-")))
		  (colon (car (to-list ":")))
		  (underbar (car (to-list "_"))))
	 (lambda (symb)
	   (symbol (map (lambda (c) (! case c
								   (hyphen underbar
									colon  underbar 
									t c)))
			(to-list symb))))))

; TODO 末尾呼出最適化
(define trans::py::encode-funcall
  (lambda (proc-codes args-codes)
	(append (tail-drop proc-codes 1)
			(apply append (map (! fn (tail-drop $0 1)) args-codes))
			(list (sprint (back proc-codes) "("
						  (join (map back args-codes) ", ") ")")))))

(define trans::py::encode
  (! let ((var-counter 0))
	 (lambda (expr)
	   (! case (type expr)
		  ('<nil> (list "nil")
		   '<inum> (list (sprint expr))
		   '<fnum> (list (sprint expr))
		   '<strn> (list (sprint "\"" expr "\""))
		   '<symb> (list (sprint (trans::py::rename-symb expr)))
		   '<cons> (! aif (assocdr trans::py::env (car expr))
					  (it (cdr expr) (environment))
					  (trans::py::encode-funcall (trans::py::encode (car expr))
												 (map trans::py::encode (cdr expr)))))))))

(define trans::py::encodetop
  (lambda (expr)
	(! let ((lines (trans::py::encode expr)))
	   (append (tail-drop lines 1)
			   (list (sprint "global " trans::py::sys-var)
					 (sprint trans::py::sys-var " = " (back lines)))))))

